/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the InitiatorViewObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitiatorViewObject{}

// InitiatorViewObject struct for InitiatorViewObject
type InitiatorViewObject struct {
	Status        []StatusResourceInner        `json:"status,omitempty"`
	InitiatorView []InitiatorViewResourceInner `json:"initiator-view,omitempty"`
}

// NewInitiatorViewObject instantiates a new InitiatorViewObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiatorViewObject() *InitiatorViewObject {
	this := InitiatorViewObject{}
	return &this
}

// NewInitiatorViewObjectWithDefaults instantiates a new InitiatorViewObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiatorViewObjectWithDefaults() *InitiatorViewObject {
	this := InitiatorViewObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InitiatorViewObject) GetStatus() []StatusResourceInner {
	if o == nil || IsNil(o.Status) {
		var ret []StatusResourceInner
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorViewObject) GetStatusOk() ([]StatusResourceInner, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InitiatorViewObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StatusResourceInner and assigns it to the Status field.
func (o *InitiatorViewObject) SetStatus(v []StatusResourceInner) {
	o.Status = v
}

// GetInitiatorView returns the InitiatorView field value if set, zero value otherwise.
func (o *InitiatorViewObject) GetInitiatorView() []InitiatorViewResourceInner {
	if o == nil || IsNil(o.InitiatorView) {
		var ret []InitiatorViewResourceInner
		return ret
	}
	return o.InitiatorView
}

// GetInitiatorViewOk returns a tuple with the InitiatorView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiatorViewObject) GetInitiatorViewOk() ([]InitiatorViewResourceInner, bool) {
	if o == nil || IsNil(o.InitiatorView) {
		return nil, false
	}
	return o.InitiatorView, true
}

// HasInitiatorView returns a boolean if a field has been set.
func (o *InitiatorViewObject) HasInitiatorView() bool {
	if o != nil && !IsNil(o.InitiatorView) {
		return true
	}

	return false
}

// SetInitiatorView gets a reference to the given []InitiatorViewResourceInner and assigns it to the InitiatorView field.
func (o *InitiatorViewObject) SetInitiatorView(v []InitiatorViewResourceInner) {
	o.InitiatorView = v
}

func (o InitiatorViewObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitiatorViewObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.InitiatorView) {
		toSerialize["initiator-view"] = o.InitiatorView
	}
	return toSerialize, nil
}

type NullableInitiatorViewObject struct {
	value *InitiatorViewObject
	isSet bool
}

func (v NullableInitiatorViewObject) Get() *InitiatorViewObject {
	return v.value
}

func (v *NullableInitiatorViewObject) Set(val *InitiatorViewObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiatorViewObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiatorViewObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiatorViewObject(val *InitiatorViewObject) *NullableInitiatorViewObject {
	return &NullableInitiatorViewObject{value: val, isSet: true}
}

func (v NullableInitiatorViewObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiatorViewObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
