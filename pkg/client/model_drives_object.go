/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DrivesObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DrivesObject{}

// DrivesObject struct for DrivesObject
type DrivesObject struct {
	Status []StatusResourceInner `json:"status,omitempty"`
	Drives []DrivesResourceInner `json:"drives,omitempty"`
}

// NewDrivesObject instantiates a new DrivesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrivesObject() *DrivesObject {
	this := DrivesObject{}
	return &this
}

// NewDrivesObjectWithDefaults instantiates a new DrivesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrivesObjectWithDefaults() *DrivesObject {
	this := DrivesObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DrivesObject) GetStatus() []StatusResourceInner {
	if o == nil || IsNil(o.Status) {
		var ret []StatusResourceInner
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DrivesObject) GetStatusOk() ([]StatusResourceInner, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DrivesObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StatusResourceInner and assigns it to the Status field.
func (o *DrivesObject) SetStatus(v []StatusResourceInner) {
	o.Status = v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *DrivesObject) GetDrives() []DrivesResourceInner {
	if o == nil || IsNil(o.Drives) {
		var ret []DrivesResourceInner
		return ret
	}
	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DrivesObject) GetDrivesOk() ([]DrivesResourceInner, bool) {
	if o == nil || IsNil(o.Drives) {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *DrivesObject) HasDrives() bool {
	if o != nil && !IsNil(o.Drives) {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []DrivesResourceInner and assigns it to the Drives field.
func (o *DrivesObject) SetDrives(v []DrivesResourceInner) {
	o.Drives = v
}

func (o DrivesObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DrivesObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Drives) {
		toSerialize["drives"] = o.Drives
	}
	return toSerialize, nil
}

type NullableDrivesObject struct {
	value *DrivesObject
	isSet bool
}

func (v NullableDrivesObject) Get() *DrivesObject {
	return v.value
}

func (v *NullableDrivesObject) Set(val *DrivesObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivesObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivesObject(val *DrivesObject) *NullableDrivesObject {
	return &NullableDrivesObject{value: val, isSet: true}
}

func (v NullableDrivesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
