/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the VolumeViewResourceInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeViewResourceInner{}

// VolumeViewResourceInner struct for VolumeViewResourceInner
type VolumeViewResourceInner struct {
	ObjectName *string `json:"object-name,omitempty"`
	Meta       *string `json:"meta,omitempty"`
	DurableId  *string `json:"durable-id,omitempty"`
	// The resource URL
	Url *string `json:"url,omitempty"`
	// User-defined name for the volume
	VolumeName *string `json:"volume-name,omitempty"`
	// Unique serial number for the volume
	VolumeSerial *string `json:"volume-serial,omitempty"`
	// Volumes URL
	VolumesUrl         *string                           `json:"volumes-url,omitempty"`
	VolumeViewMappings []VolumeViewMappingsResourceInner `json:"volume-view-mappings,omitempty"`
}

// NewVolumeViewResourceInner instantiates a new VolumeViewResourceInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeViewResourceInner() *VolumeViewResourceInner {
	this := VolumeViewResourceInner{}
	return &this
}

// NewVolumeViewResourceInnerWithDefaults instantiates a new VolumeViewResourceInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeViewResourceInnerWithDefaults() *VolumeViewResourceInner {
	this := VolumeViewResourceInner{}
	return &this
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *VolumeViewResourceInner) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetMeta() string {
	if o == nil || IsNil(o.Meta) {
		var ret string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetMetaOk() (*string, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given string and assigns it to the Meta field.
func (o *VolumeViewResourceInner) SetMeta(v string) {
	o.Meta = &v
}

// GetDurableId returns the DurableId field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetDurableId() string {
	if o == nil || IsNil(o.DurableId) {
		var ret string
		return ret
	}
	return *o.DurableId
}

// GetDurableIdOk returns a tuple with the DurableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetDurableIdOk() (*string, bool) {
	if o == nil || IsNil(o.DurableId) {
		return nil, false
	}
	return o.DurableId, true
}

// HasDurableId returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasDurableId() bool {
	if o != nil && !IsNil(o.DurableId) {
		return true
	}

	return false
}

// SetDurableId gets a reference to the given string and assigns it to the DurableId field.
func (o *VolumeViewResourceInner) SetDurableId(v string) {
	o.DurableId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *VolumeViewResourceInner) SetUrl(v string) {
	o.Url = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *VolumeViewResourceInner) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetVolumeSerial returns the VolumeSerial field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetVolumeSerial() string {
	if o == nil || IsNil(o.VolumeSerial) {
		var ret string
		return ret
	}
	return *o.VolumeSerial
}

// GetVolumeSerialOk returns a tuple with the VolumeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetVolumeSerialOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeSerial) {
		return nil, false
	}
	return o.VolumeSerial, true
}

// HasVolumeSerial returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasVolumeSerial() bool {
	if o != nil && !IsNil(o.VolumeSerial) {
		return true
	}

	return false
}

// SetVolumeSerial gets a reference to the given string and assigns it to the VolumeSerial field.
func (o *VolumeViewResourceInner) SetVolumeSerial(v string) {
	o.VolumeSerial = &v
}

// GetVolumesUrl returns the VolumesUrl field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetVolumesUrl() string {
	if o == nil || IsNil(o.VolumesUrl) {
		var ret string
		return ret
	}
	return *o.VolumesUrl
}

// GetVolumesUrlOk returns a tuple with the VolumesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetVolumesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VolumesUrl) {
		return nil, false
	}
	return o.VolumesUrl, true
}

// HasVolumesUrl returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasVolumesUrl() bool {
	if o != nil && !IsNil(o.VolumesUrl) {
		return true
	}

	return false
}

// SetVolumesUrl gets a reference to the given string and assigns it to the VolumesUrl field.
func (o *VolumeViewResourceInner) SetVolumesUrl(v string) {
	o.VolumesUrl = &v
}

// GetVolumeViewMappings returns the VolumeViewMappings field value if set, zero value otherwise.
func (o *VolumeViewResourceInner) GetVolumeViewMappings() []VolumeViewMappingsResourceInner {
	if o == nil || IsNil(o.VolumeViewMappings) {
		var ret []VolumeViewMappingsResourceInner
		return ret
	}
	return o.VolumeViewMappings
}

// GetVolumeViewMappingsOk returns a tuple with the VolumeViewMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeViewResourceInner) GetVolumeViewMappingsOk() ([]VolumeViewMappingsResourceInner, bool) {
	if o == nil || IsNil(o.VolumeViewMappings) {
		return nil, false
	}
	return o.VolumeViewMappings, true
}

// HasVolumeViewMappings returns a boolean if a field has been set.
func (o *VolumeViewResourceInner) HasVolumeViewMappings() bool {
	if o != nil && !IsNil(o.VolumeViewMappings) {
		return true
	}

	return false
}

// SetVolumeViewMappings gets a reference to the given []VolumeViewMappingsResourceInner and assigns it to the VolumeViewMappings field.
func (o *VolumeViewResourceInner) SetVolumeViewMappings(v []VolumeViewMappingsResourceInner) {
	o.VolumeViewMappings = v
}

func (o VolumeViewResourceInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeViewResourceInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectName) {
		toSerialize["object-name"] = o.ObjectName
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.DurableId) {
		toSerialize["durable-id"] = o.DurableId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volume-name"] = o.VolumeName
	}
	if !IsNil(o.VolumeSerial) {
		toSerialize["volume-serial"] = o.VolumeSerial
	}
	if !IsNil(o.VolumesUrl) {
		toSerialize["volumes-url"] = o.VolumesUrl
	}
	if !IsNil(o.VolumeViewMappings) {
		toSerialize["volume-view-mappings"] = o.VolumeViewMappings
	}
	return toSerialize, nil
}

type NullableVolumeViewResourceInner struct {
	value *VolumeViewResourceInner
	isSet bool
}

func (v NullableVolumeViewResourceInner) Get() *VolumeViewResourceInner {
	return v.value
}

func (v *NullableVolumeViewResourceInner) Set(val *VolumeViewResourceInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeViewResourceInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeViewResourceInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeViewResourceInner(val *VolumeViewResourceInner) *NullableVolumeViewResourceInner {
	return &NullableVolumeViewResourceInner{value: val, isSet: true}
}

func (v NullableVolumeViewResourceInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeViewResourceInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
