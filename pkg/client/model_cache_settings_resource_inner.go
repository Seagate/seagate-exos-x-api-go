/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CacheSettingsResourceInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettingsResourceInner{}

// CacheSettingsResourceInner struct for CacheSettingsResourceInner
type CacheSettingsResourceInner struct {
	ObjectName     *string `json:"object-name,omitempty"`
	Meta           *string `json:"meta,omitempty"`
<<<<<<< HEAD
	CacheBlockSize *int64  `json:"cache-block-size,omitempty"`
	// Storage system operation mode (redundancy mode)
	OperationMode *string `json:"operation-mode,omitempty"`
	// Storage system operation mode (redundancy mode)( In numeric form )
	OperationModeNumeric *int64 `json:"operation-mode-numeric,omitempty"`
	// Used to describe the Host Protection Information
	PiFormat *string `json:"pi-format,omitempty"`
	// Used to describe the Host Protection Information( In numeric form )
	PiFormatNumeric           *int64                                   `json:"pi-format-numeric,omitempty"`
=======
	CacheBlockSize *int32  `json:"cache-block-size,omitempty"`
	// Storage system operation mode (redundancy mode)
	OperationMode *string `json:"operation-mode,omitempty"`
	// Storage system operation mode (redundancy mode)( In numeric form )
	OperationModeNumeric *int32 `json:"operation-mode-numeric,omitempty"`
	// Used to describe the Host Protection Information
	PiFormat *string `json:"pi-format,omitempty"`
	// Used to describe the Host Protection Information( In numeric form )
	PiFormatNumeric           *int32                                   `json:"pi-format-numeric,omitempty"`
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	ControllerCacheParameters []ControllerCacheParametersResourceInner `json:"controller-cache-parameters,omitempty"`
}

// NewCacheSettingsResourceInner instantiates a new CacheSettingsResourceInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettingsResourceInner() *CacheSettingsResourceInner {
	this := CacheSettingsResourceInner{}
	return &this
}

// NewCacheSettingsResourceInnerWithDefaults instantiates a new CacheSettingsResourceInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsResourceInnerWithDefaults() *CacheSettingsResourceInner {
	this := CacheSettingsResourceInner{}
	return &this
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *CacheSettingsResourceInner) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsResourceInner) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *CacheSettingsResourceInner) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CacheSettingsResourceInner) GetMeta() string {
	if o == nil || IsNil(o.Meta) {
		var ret string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsResourceInner) GetMetaOk() (*string, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given string and assigns it to the Meta field.
func (o *CacheSettingsResourceInner) SetMeta(v string) {
	o.Meta = &v
}

// GetCacheBlockSize returns the CacheBlockSize field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetCacheBlockSize() int64 {
	if o == nil || IsNil(o.CacheBlockSize) {
		var ret int64
=======
func (o *CacheSettingsResourceInner) GetCacheBlockSize() int32 {
	if o == nil || IsNil(o.CacheBlockSize) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.CacheBlockSize
}

// GetCacheBlockSizeOk returns a tuple with the CacheBlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetCacheBlockSizeOk() (*int64, bool) {
=======
func (o *CacheSettingsResourceInner) GetCacheBlockSizeOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.CacheBlockSize) {
		return nil, false
	}
	return o.CacheBlockSize, true
}

// HasCacheBlockSize returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasCacheBlockSize() bool {
	if o != nil && !IsNil(o.CacheBlockSize) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetCacheBlockSize gets a reference to the given int64 and assigns it to the CacheBlockSize field.
func (o *CacheSettingsResourceInner) SetCacheBlockSize(v int64) {
=======
// SetCacheBlockSize gets a reference to the given int32 and assigns it to the CacheBlockSize field.
func (o *CacheSettingsResourceInner) SetCacheBlockSize(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.CacheBlockSize = &v
}

// GetOperationMode returns the OperationMode field value if set, zero value otherwise.
func (o *CacheSettingsResourceInner) GetOperationMode() string {
	if o == nil || IsNil(o.OperationMode) {
		var ret string
		return ret
	}
	return *o.OperationMode
}

// GetOperationModeOk returns a tuple with the OperationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsResourceInner) GetOperationModeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationMode) {
		return nil, false
	}
	return o.OperationMode, true
}

// HasOperationMode returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasOperationMode() bool {
	if o != nil && !IsNil(o.OperationMode) {
		return true
	}

	return false
}

// SetOperationMode gets a reference to the given string and assigns it to the OperationMode field.
func (o *CacheSettingsResourceInner) SetOperationMode(v string) {
	o.OperationMode = &v
}

// GetOperationModeNumeric returns the OperationModeNumeric field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetOperationModeNumeric() int64 {
	if o == nil || IsNil(o.OperationModeNumeric) {
		var ret int64
=======
func (o *CacheSettingsResourceInner) GetOperationModeNumeric() int32 {
	if o == nil || IsNil(o.OperationModeNumeric) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.OperationModeNumeric
}

// GetOperationModeNumericOk returns a tuple with the OperationModeNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetOperationModeNumericOk() (*int64, bool) {
=======
func (o *CacheSettingsResourceInner) GetOperationModeNumericOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.OperationModeNumeric) {
		return nil, false
	}
	return o.OperationModeNumeric, true
}

// HasOperationModeNumeric returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasOperationModeNumeric() bool {
	if o != nil && !IsNil(o.OperationModeNumeric) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetOperationModeNumeric gets a reference to the given int64 and assigns it to the OperationModeNumeric field.
func (o *CacheSettingsResourceInner) SetOperationModeNumeric(v int64) {
=======
// SetOperationModeNumeric gets a reference to the given int32 and assigns it to the OperationModeNumeric field.
func (o *CacheSettingsResourceInner) SetOperationModeNumeric(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.OperationModeNumeric = &v
}

// GetPiFormat returns the PiFormat field value if set, zero value otherwise.
func (o *CacheSettingsResourceInner) GetPiFormat() string {
	if o == nil || IsNil(o.PiFormat) {
		var ret string
		return ret
	}
	return *o.PiFormat
}

// GetPiFormatOk returns a tuple with the PiFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsResourceInner) GetPiFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PiFormat) {
		return nil, false
	}
	return o.PiFormat, true
}

// HasPiFormat returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasPiFormat() bool {
	if o != nil && !IsNil(o.PiFormat) {
		return true
	}

	return false
}

// SetPiFormat gets a reference to the given string and assigns it to the PiFormat field.
func (o *CacheSettingsResourceInner) SetPiFormat(v string) {
	o.PiFormat = &v
}

// GetPiFormatNumeric returns the PiFormatNumeric field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetPiFormatNumeric() int64 {
	if o == nil || IsNil(o.PiFormatNumeric) {
		var ret int64
=======
func (o *CacheSettingsResourceInner) GetPiFormatNumeric() int32 {
	if o == nil || IsNil(o.PiFormatNumeric) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.PiFormatNumeric
}

// GetPiFormatNumericOk returns a tuple with the PiFormatNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *CacheSettingsResourceInner) GetPiFormatNumericOk() (*int64, bool) {
=======
func (o *CacheSettingsResourceInner) GetPiFormatNumericOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.PiFormatNumeric) {
		return nil, false
	}
	return o.PiFormatNumeric, true
}

// HasPiFormatNumeric returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasPiFormatNumeric() bool {
	if o != nil && !IsNil(o.PiFormatNumeric) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetPiFormatNumeric gets a reference to the given int64 and assigns it to the PiFormatNumeric field.
func (o *CacheSettingsResourceInner) SetPiFormatNumeric(v int64) {
=======
// SetPiFormatNumeric gets a reference to the given int32 and assigns it to the PiFormatNumeric field.
func (o *CacheSettingsResourceInner) SetPiFormatNumeric(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.PiFormatNumeric = &v
}

// GetControllerCacheParameters returns the ControllerCacheParameters field value if set, zero value otherwise.
func (o *CacheSettingsResourceInner) GetControllerCacheParameters() []ControllerCacheParametersResourceInner {
	if o == nil || IsNil(o.ControllerCacheParameters) {
		var ret []ControllerCacheParametersResourceInner
		return ret
	}
	return o.ControllerCacheParameters
}

// GetControllerCacheParametersOk returns a tuple with the ControllerCacheParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettingsResourceInner) GetControllerCacheParametersOk() ([]ControllerCacheParametersResourceInner, bool) {
	if o == nil || IsNil(o.ControllerCacheParameters) {
		return nil, false
	}
	return o.ControllerCacheParameters, true
}

// HasControllerCacheParameters returns a boolean if a field has been set.
func (o *CacheSettingsResourceInner) HasControllerCacheParameters() bool {
	if o != nil && !IsNil(o.ControllerCacheParameters) {
		return true
	}

	return false
}

// SetControllerCacheParameters gets a reference to the given []ControllerCacheParametersResourceInner and assigns it to the ControllerCacheParameters field.
func (o *CacheSettingsResourceInner) SetControllerCacheParameters(v []ControllerCacheParametersResourceInner) {
	o.ControllerCacheParameters = v
}

func (o CacheSettingsResourceInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettingsResourceInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectName) {
		toSerialize["object-name"] = o.ObjectName
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.CacheBlockSize) {
		toSerialize["cache-block-size"] = o.CacheBlockSize
	}
	if !IsNil(o.OperationMode) {
		toSerialize["operation-mode"] = o.OperationMode
	}
	if !IsNil(o.OperationModeNumeric) {
		toSerialize["operation-mode-numeric"] = o.OperationModeNumeric
	}
	if !IsNil(o.PiFormat) {
		toSerialize["pi-format"] = o.PiFormat
	}
	if !IsNil(o.PiFormatNumeric) {
		toSerialize["pi-format-numeric"] = o.PiFormatNumeric
	}
	if !IsNil(o.ControllerCacheParameters) {
		toSerialize["controller-cache-parameters"] = o.ControllerCacheParameters
	}
	return toSerialize, nil
}

type NullableCacheSettingsResourceInner struct {
	value *CacheSettingsResourceInner
	isSet bool
}

func (v NullableCacheSettingsResourceInner) Get() *CacheSettingsResourceInner {
	return v.value
}

func (v *NullableCacheSettingsResourceInner) Set(val *CacheSettingsResourceInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettingsResourceInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettingsResourceInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettingsResourceInner(val *CacheSettingsResourceInner) *NullableCacheSettingsResourceInner {
	return &NullableCacheSettingsResourceInner{value: val, isSet: true}
}

func (v NullableCacheSettingsResourceInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettingsResourceInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
