/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the VersionsResourceInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionsResourceInner{}

// VersionsResourceInner struct for VersionsResourceInner
type VersionsResourceInner struct {
	ObjectName          *string `json:"object-name,omitempty"`
	Meta                *string `json:"meta,omitempty"`
<<<<<<< HEAD
	BackplaneType       *int64  `json:"backplane-type,omitempty"`
	BuildDate           *string `json:"build-date,omitempty"`
	BundleBaseVersion   *string `json:"bundle-base-version,omitempty"`
	BundleStatus        *string `json:"bundle-status,omitempty"`
	BundleStatusNumeric *int64  `json:"bundle-status-numeric,omitempty"`
=======
	BackplaneType       *int32  `json:"backplane-type,omitempty"`
	BuildDate           *string `json:"build-date,omitempty"`
	BundleBaseVersion   *string `json:"bundle-base-version,omitempty"`
	BundleStatus        *string `json:"bundle-status,omitempty"`
	BundleStatusNumeric *int32  `json:"bundle-status-numeric,omitempty"`
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	BundleVersion       *string `json:"bundle-version,omitempty"`
	BundleVersionOnly   *string `json:"bundle-version-only,omitempty"`
	CapiVersion         *string `json:"capi-version,omitempty"`
	// Customization Toolkit (CTK) Version
	CtkVersion          *string `json:"ctk-version,omitempty"`
<<<<<<< HEAD
	DiskChannelRevision *int64  `json:"disk-channel_revision,omitempty"`
=======
	DiskChannelRevision *int32  `json:"disk-channel_revision,omitempty"`
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	// The Expander Controller firmware version
	EcFw *string `json:"ec-fw,omitempty"`
	// Default hardware platform brand of the firmware
	FwDefaultPlatformBrand *string `json:"fw-default-platform-brand,omitempty"`
	// Default hardware platform brand of the firmware( In numeric form )
<<<<<<< HEAD
	FwDefaultPlatformBrandNumeric *int64  `json:"fw-default-platform-brand-numeric,omitempty"`
	GemVersion                    *string `json:"gem-version,omitempty"`
	HimModel                      *string `json:"him-model,omitempty"`
	HimRev                        *string `json:"him-rev,omitempty"`
	HostChannelRevision           *int64  `json:"host-channel_revision,omitempty"`
=======
	FwDefaultPlatformBrandNumeric *int32  `json:"fw-default-platform-brand-numeric,omitempty"`
	GemVersion                    *string `json:"gem-version,omitempty"`
	HimModel                      *string `json:"him-model,omitempty"`
	HimRev                        *string `json:"him-rev,omitempty"`
	HostChannelRevision           *int32  `json:"host-channel_revision,omitempty"`
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	// The main hardware version of the controller
	HwRev *string `json:"hw-rev,omitempty"`
	// The Management Controller main ('app') baselevel firmware version
	McBaseFw *string `json:"mc-base-fw,omitempty"`
	// The Management Controller main ('app') firmware version
	McFw *string `json:"mc-fw,omitempty"`
	// The Management Controller loader firmware version
	McLoader *string `json:"mc-loader,omitempty"`
	// MC Operating System (OS) Version
	McosVersion *string `json:"mcos-version,omitempty"`
	// The SC Boot Memory Reference Code (MRC) version
	MrcVersion                             *string `json:"mrc-version,omitempty"`
	PcieSwitchBackendConfigurationVersion  *string `json:"pcie-switch-backend-configuration-version,omitempty"`
	PcieSwitchBackendFirmwareVersion       *string `json:"pcie-switch-backend-firmware-version,omitempty"`
	PcieSwitchFrontendConfigurationVersion *string `json:"pcie-switch-frontend-configuration-version,omitempty"`
	PcieSwitchFrontendFirmwareVersion      *string `json:"pcie-switch-frontend-firmware-version,omitempty"`
	// The CPLD code version
	PldRev        *string `json:"pld-rev,omitempty"`
	PmCpldVersion *string `json:"pm-cpld-version,omitempty"`
	// PRM CPLD code version
	PrmVersion *string `json:"prm-version,omitempty"`
	// CLI Help version
	PubsVersion *string `json:"pubs-version,omitempty"`
	ScBaselevel *string `json:"sc-baselevel,omitempty"`
	// The Storage Controller processor type
	ScCpuType *string `json:"sc-cpu-type,omitempty"`
	// ASIC Controller Version
	ScFuVersion *string `json:"sc-fu-version,omitempty"`
	// The Storage Controller main ('app') firmware version
	ScFw *string `json:"sc-fw,omitempty"`
	// The Storage Controller loader firmware version
	ScLoader *string `json:"sc-loader,omitempty"`
	// The Storage Controller memory-controller FPGA code version
	ScMemory           *string `json:"sc-memory,omitempty"`
	TranslationVersion *string `json:"translation-version,omitempty"`
}

// NewVersionsResourceInner instantiates a new VersionsResourceInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionsResourceInner() *VersionsResourceInner {
	this := VersionsResourceInner{}
	return &this
}

// NewVersionsResourceInnerWithDefaults instantiates a new VersionsResourceInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionsResourceInnerWithDefaults() *VersionsResourceInner {
	this := VersionsResourceInner{}
	return &this
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *VersionsResourceInner) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMeta() string {
	if o == nil || IsNil(o.Meta) {
		var ret string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMetaOk() (*string, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given string and assigns it to the Meta field.
func (o *VersionsResourceInner) SetMeta(v string) {
	o.Meta = &v
}

// GetBackplaneType returns the BackplaneType field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetBackplaneType() int64 {
	if o == nil || IsNil(o.BackplaneType) {
		var ret int64
=======
func (o *VersionsResourceInner) GetBackplaneType() int32 {
	if o == nil || IsNil(o.BackplaneType) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.BackplaneType
}

// GetBackplaneTypeOk returns a tuple with the BackplaneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetBackplaneTypeOk() (*int64, bool) {
=======
func (o *VersionsResourceInner) GetBackplaneTypeOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.BackplaneType) {
		return nil, false
	}
	return o.BackplaneType, true
}

// HasBackplaneType returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBackplaneType() bool {
	if o != nil && !IsNil(o.BackplaneType) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetBackplaneType gets a reference to the given int64 and assigns it to the BackplaneType field.
func (o *VersionsResourceInner) SetBackplaneType(v int64) {
=======
// SetBackplaneType gets a reference to the given int32 and assigns it to the BackplaneType field.
func (o *VersionsResourceInner) SetBackplaneType(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.BackplaneType = &v
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetBuildDate() string {
	if o == nil || IsNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetBuildDateOk() (*string, bool) {
	if o == nil || IsNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBuildDate() bool {
	if o != nil && !IsNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *VersionsResourceInner) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetBundleBaseVersion returns the BundleBaseVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetBundleBaseVersion() string {
	if o == nil || IsNil(o.BundleBaseVersion) {
		var ret string
		return ret
	}
	return *o.BundleBaseVersion
}

// GetBundleBaseVersionOk returns a tuple with the BundleBaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetBundleBaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BundleBaseVersion) {
		return nil, false
	}
	return o.BundleBaseVersion, true
}

// HasBundleBaseVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBundleBaseVersion() bool {
	if o != nil && !IsNil(o.BundleBaseVersion) {
		return true
	}

	return false
}

// SetBundleBaseVersion gets a reference to the given string and assigns it to the BundleBaseVersion field.
func (o *VersionsResourceInner) SetBundleBaseVersion(v string) {
	o.BundleBaseVersion = &v
}

// GetBundleStatus returns the BundleStatus field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetBundleStatus() string {
	if o == nil || IsNil(o.BundleStatus) {
		var ret string
		return ret
	}
	return *o.BundleStatus
}

// GetBundleStatusOk returns a tuple with the BundleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetBundleStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BundleStatus) {
		return nil, false
	}
	return o.BundleStatus, true
}

// HasBundleStatus returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBundleStatus() bool {
	if o != nil && !IsNil(o.BundleStatus) {
		return true
	}

	return false
}

// SetBundleStatus gets a reference to the given string and assigns it to the BundleStatus field.
func (o *VersionsResourceInner) SetBundleStatus(v string) {
	o.BundleStatus = &v
}

// GetBundleStatusNumeric returns the BundleStatusNumeric field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetBundleStatusNumeric() int64 {
	if o == nil || IsNil(o.BundleStatusNumeric) {
		var ret int64
=======
func (o *VersionsResourceInner) GetBundleStatusNumeric() int32 {
	if o == nil || IsNil(o.BundleStatusNumeric) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.BundleStatusNumeric
}

// GetBundleStatusNumericOk returns a tuple with the BundleStatusNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetBundleStatusNumericOk() (*int64, bool) {
=======
func (o *VersionsResourceInner) GetBundleStatusNumericOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.BundleStatusNumeric) {
		return nil, false
	}
	return o.BundleStatusNumeric, true
}

// HasBundleStatusNumeric returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBundleStatusNumeric() bool {
	if o != nil && !IsNil(o.BundleStatusNumeric) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetBundleStatusNumeric gets a reference to the given int64 and assigns it to the BundleStatusNumeric field.
func (o *VersionsResourceInner) SetBundleStatusNumeric(v int64) {
=======
// SetBundleStatusNumeric gets a reference to the given int32 and assigns it to the BundleStatusNumeric field.
func (o *VersionsResourceInner) SetBundleStatusNumeric(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.BundleStatusNumeric = &v
}

// GetBundleVersion returns the BundleVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetBundleVersion() string {
	if o == nil || IsNil(o.BundleVersion) {
		var ret string
		return ret
	}
	return *o.BundleVersion
}

// GetBundleVersionOk returns a tuple with the BundleVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetBundleVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BundleVersion) {
		return nil, false
	}
	return o.BundleVersion, true
}

// HasBundleVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBundleVersion() bool {
	if o != nil && !IsNil(o.BundleVersion) {
		return true
	}

	return false
}

// SetBundleVersion gets a reference to the given string and assigns it to the BundleVersion field.
func (o *VersionsResourceInner) SetBundleVersion(v string) {
	o.BundleVersion = &v
}

// GetBundleVersionOnly returns the BundleVersionOnly field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetBundleVersionOnly() string {
	if o == nil || IsNil(o.BundleVersionOnly) {
		var ret string
		return ret
	}
	return *o.BundleVersionOnly
}

// GetBundleVersionOnlyOk returns a tuple with the BundleVersionOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetBundleVersionOnlyOk() (*string, bool) {
	if o == nil || IsNil(o.BundleVersionOnly) {
		return nil, false
	}
	return o.BundleVersionOnly, true
}

// HasBundleVersionOnly returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasBundleVersionOnly() bool {
	if o != nil && !IsNil(o.BundleVersionOnly) {
		return true
	}

	return false
}

// SetBundleVersionOnly gets a reference to the given string and assigns it to the BundleVersionOnly field.
func (o *VersionsResourceInner) SetBundleVersionOnly(v string) {
	o.BundleVersionOnly = &v
}

// GetCapiVersion returns the CapiVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetCapiVersion() string {
	if o == nil || IsNil(o.CapiVersion) {
		var ret string
		return ret
	}
	return *o.CapiVersion
}

// GetCapiVersionOk returns a tuple with the CapiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetCapiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CapiVersion) {
		return nil, false
	}
	return o.CapiVersion, true
}

// HasCapiVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasCapiVersion() bool {
	if o != nil && !IsNil(o.CapiVersion) {
		return true
	}

	return false
}

// SetCapiVersion gets a reference to the given string and assigns it to the CapiVersion field.
func (o *VersionsResourceInner) SetCapiVersion(v string) {
	o.CapiVersion = &v
}

// GetCtkVersion returns the CtkVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetCtkVersion() string {
	if o == nil || IsNil(o.CtkVersion) {
		var ret string
		return ret
	}
	return *o.CtkVersion
}

// GetCtkVersionOk returns a tuple with the CtkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetCtkVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CtkVersion) {
		return nil, false
	}
	return o.CtkVersion, true
}

// HasCtkVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasCtkVersion() bool {
	if o != nil && !IsNil(o.CtkVersion) {
		return true
	}

	return false
}

// SetCtkVersion gets a reference to the given string and assigns it to the CtkVersion field.
func (o *VersionsResourceInner) SetCtkVersion(v string) {
	o.CtkVersion = &v
}

// GetDiskChannelRevision returns the DiskChannelRevision field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetDiskChannelRevision() int64 {
	if o == nil || IsNil(o.DiskChannelRevision) {
		var ret int64
=======
func (o *VersionsResourceInner) GetDiskChannelRevision() int32 {
	if o == nil || IsNil(o.DiskChannelRevision) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.DiskChannelRevision
}

// GetDiskChannelRevisionOk returns a tuple with the DiskChannelRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetDiskChannelRevisionOk() (*int64, bool) {
=======
func (o *VersionsResourceInner) GetDiskChannelRevisionOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.DiskChannelRevision) {
		return nil, false
	}
	return o.DiskChannelRevision, true
}

// HasDiskChannelRevision returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasDiskChannelRevision() bool {
	if o != nil && !IsNil(o.DiskChannelRevision) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetDiskChannelRevision gets a reference to the given int64 and assigns it to the DiskChannelRevision field.
func (o *VersionsResourceInner) SetDiskChannelRevision(v int64) {
=======
// SetDiskChannelRevision gets a reference to the given int32 and assigns it to the DiskChannelRevision field.
func (o *VersionsResourceInner) SetDiskChannelRevision(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.DiskChannelRevision = &v
}

// GetEcFw returns the EcFw field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetEcFw() string {
	if o == nil || IsNil(o.EcFw) {
		var ret string
		return ret
	}
	return *o.EcFw
}

// GetEcFwOk returns a tuple with the EcFw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetEcFwOk() (*string, bool) {
	if o == nil || IsNil(o.EcFw) {
		return nil, false
	}
	return o.EcFw, true
}

// HasEcFw returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasEcFw() bool {
	if o != nil && !IsNil(o.EcFw) {
		return true
	}

	return false
}

// SetEcFw gets a reference to the given string and assigns it to the EcFw field.
func (o *VersionsResourceInner) SetEcFw(v string) {
	o.EcFw = &v
}

// GetFwDefaultPlatformBrand returns the FwDefaultPlatformBrand field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetFwDefaultPlatformBrand() string {
	if o == nil || IsNil(o.FwDefaultPlatformBrand) {
		var ret string
		return ret
	}
	return *o.FwDefaultPlatformBrand
}

// GetFwDefaultPlatformBrandOk returns a tuple with the FwDefaultPlatformBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetFwDefaultPlatformBrandOk() (*string, bool) {
	if o == nil || IsNil(o.FwDefaultPlatformBrand) {
		return nil, false
	}
	return o.FwDefaultPlatformBrand, true
}

// HasFwDefaultPlatformBrand returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasFwDefaultPlatformBrand() bool {
	if o != nil && !IsNil(o.FwDefaultPlatformBrand) {
		return true
	}

	return false
}

// SetFwDefaultPlatformBrand gets a reference to the given string and assigns it to the FwDefaultPlatformBrand field.
func (o *VersionsResourceInner) SetFwDefaultPlatformBrand(v string) {
	o.FwDefaultPlatformBrand = &v
}

// GetFwDefaultPlatformBrandNumeric returns the FwDefaultPlatformBrandNumeric field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetFwDefaultPlatformBrandNumeric() int64 {
	if o == nil || IsNil(o.FwDefaultPlatformBrandNumeric) {
		var ret int64
=======
func (o *VersionsResourceInner) GetFwDefaultPlatformBrandNumeric() int32 {
	if o == nil || IsNil(o.FwDefaultPlatformBrandNumeric) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.FwDefaultPlatformBrandNumeric
}

// GetFwDefaultPlatformBrandNumericOk returns a tuple with the FwDefaultPlatformBrandNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetFwDefaultPlatformBrandNumericOk() (*int64, bool) {
=======
func (o *VersionsResourceInner) GetFwDefaultPlatformBrandNumericOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.FwDefaultPlatformBrandNumeric) {
		return nil, false
	}
	return o.FwDefaultPlatformBrandNumeric, true
}

// HasFwDefaultPlatformBrandNumeric returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasFwDefaultPlatformBrandNumeric() bool {
	if o != nil && !IsNil(o.FwDefaultPlatformBrandNumeric) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetFwDefaultPlatformBrandNumeric gets a reference to the given int64 and assigns it to the FwDefaultPlatformBrandNumeric field.
func (o *VersionsResourceInner) SetFwDefaultPlatformBrandNumeric(v int64) {
=======
// SetFwDefaultPlatformBrandNumeric gets a reference to the given int32 and assigns it to the FwDefaultPlatformBrandNumeric field.
func (o *VersionsResourceInner) SetFwDefaultPlatformBrandNumeric(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.FwDefaultPlatformBrandNumeric = &v
}

// GetGemVersion returns the GemVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetGemVersion() string {
	if o == nil || IsNil(o.GemVersion) {
		var ret string
		return ret
	}
	return *o.GemVersion
}

// GetGemVersionOk returns a tuple with the GemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetGemVersionOk() (*string, bool) {
	if o == nil || IsNil(o.GemVersion) {
		return nil, false
	}
	return o.GemVersion, true
}

// HasGemVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasGemVersion() bool {
	if o != nil && !IsNil(o.GemVersion) {
		return true
	}

	return false
}

// SetGemVersion gets a reference to the given string and assigns it to the GemVersion field.
func (o *VersionsResourceInner) SetGemVersion(v string) {
	o.GemVersion = &v
}

// GetHimModel returns the HimModel field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetHimModel() string {
	if o == nil || IsNil(o.HimModel) {
		var ret string
		return ret
	}
	return *o.HimModel
}

// GetHimModelOk returns a tuple with the HimModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetHimModelOk() (*string, bool) {
	if o == nil || IsNil(o.HimModel) {
		return nil, false
	}
	return o.HimModel, true
}

// HasHimModel returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasHimModel() bool {
	if o != nil && !IsNil(o.HimModel) {
		return true
	}

	return false
}

// SetHimModel gets a reference to the given string and assigns it to the HimModel field.
func (o *VersionsResourceInner) SetHimModel(v string) {
	o.HimModel = &v
}

// GetHimRev returns the HimRev field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetHimRev() string {
	if o == nil || IsNil(o.HimRev) {
		var ret string
		return ret
	}
	return *o.HimRev
}

// GetHimRevOk returns a tuple with the HimRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetHimRevOk() (*string, bool) {
	if o == nil || IsNil(o.HimRev) {
		return nil, false
	}
	return o.HimRev, true
}

// HasHimRev returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasHimRev() bool {
	if o != nil && !IsNil(o.HimRev) {
		return true
	}

	return false
}

// SetHimRev gets a reference to the given string and assigns it to the HimRev field.
func (o *VersionsResourceInner) SetHimRev(v string) {
	o.HimRev = &v
}

// GetHostChannelRevision returns the HostChannelRevision field value if set, zero value otherwise.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetHostChannelRevision() int64 {
	if o == nil || IsNil(o.HostChannelRevision) {
		var ret int64
=======
func (o *VersionsResourceInner) GetHostChannelRevision() int32 {
	if o == nil || IsNil(o.HostChannelRevision) {
		var ret int32
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
		return ret
	}
	return *o.HostChannelRevision
}

// GetHostChannelRevisionOk returns a tuple with the HostChannelRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
<<<<<<< HEAD
func (o *VersionsResourceInner) GetHostChannelRevisionOk() (*int64, bool) {
=======
func (o *VersionsResourceInner) GetHostChannelRevisionOk() (*int32, bool) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	if o == nil || IsNil(o.HostChannelRevision) {
		return nil, false
	}
	return o.HostChannelRevision, true
}

// HasHostChannelRevision returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasHostChannelRevision() bool {
	if o != nil && !IsNil(o.HostChannelRevision) {
		return true
	}

	return false
}

<<<<<<< HEAD
// SetHostChannelRevision gets a reference to the given int64 and assigns it to the HostChannelRevision field.
func (o *VersionsResourceInner) SetHostChannelRevision(v int64) {
=======
// SetHostChannelRevision gets a reference to the given int32 and assigns it to the HostChannelRevision field.
func (o *VersionsResourceInner) SetHostChannelRevision(v int32) {
>>>>>>> aac8175 (feat(apiv2): openapi generator and validator and spec)
	o.HostChannelRevision = &v
}

// GetHwRev returns the HwRev field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetHwRev() string {
	if o == nil || IsNil(o.HwRev) {
		var ret string
		return ret
	}
	return *o.HwRev
}

// GetHwRevOk returns a tuple with the HwRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetHwRevOk() (*string, bool) {
	if o == nil || IsNil(o.HwRev) {
		return nil, false
	}
	return o.HwRev, true
}

// HasHwRev returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasHwRev() bool {
	if o != nil && !IsNil(o.HwRev) {
		return true
	}

	return false
}

// SetHwRev gets a reference to the given string and assigns it to the HwRev field.
func (o *VersionsResourceInner) SetHwRev(v string) {
	o.HwRev = &v
}

// GetMcBaseFw returns the McBaseFw field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMcBaseFw() string {
	if o == nil || IsNil(o.McBaseFw) {
		var ret string
		return ret
	}
	return *o.McBaseFw
}

// GetMcBaseFwOk returns a tuple with the McBaseFw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMcBaseFwOk() (*string, bool) {
	if o == nil || IsNil(o.McBaseFw) {
		return nil, false
	}
	return o.McBaseFw, true
}

// HasMcBaseFw returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMcBaseFw() bool {
	if o != nil && !IsNil(o.McBaseFw) {
		return true
	}

	return false
}

// SetMcBaseFw gets a reference to the given string and assigns it to the McBaseFw field.
func (o *VersionsResourceInner) SetMcBaseFw(v string) {
	o.McBaseFw = &v
}

// GetMcFw returns the McFw field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMcFw() string {
	if o == nil || IsNil(o.McFw) {
		var ret string
		return ret
	}
	return *o.McFw
}

// GetMcFwOk returns a tuple with the McFw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMcFwOk() (*string, bool) {
	if o == nil || IsNil(o.McFw) {
		return nil, false
	}
	return o.McFw, true
}

// HasMcFw returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMcFw() bool {
	if o != nil && !IsNil(o.McFw) {
		return true
	}

	return false
}

// SetMcFw gets a reference to the given string and assigns it to the McFw field.
func (o *VersionsResourceInner) SetMcFw(v string) {
	o.McFw = &v
}

// GetMcLoader returns the McLoader field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMcLoader() string {
	if o == nil || IsNil(o.McLoader) {
		var ret string
		return ret
	}
	return *o.McLoader
}

// GetMcLoaderOk returns a tuple with the McLoader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMcLoaderOk() (*string, bool) {
	if o == nil || IsNil(o.McLoader) {
		return nil, false
	}
	return o.McLoader, true
}

// HasMcLoader returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMcLoader() bool {
	if o != nil && !IsNil(o.McLoader) {
		return true
	}

	return false
}

// SetMcLoader gets a reference to the given string and assigns it to the McLoader field.
func (o *VersionsResourceInner) SetMcLoader(v string) {
	o.McLoader = &v
}

// GetMcosVersion returns the McosVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMcosVersion() string {
	if o == nil || IsNil(o.McosVersion) {
		var ret string
		return ret
	}
	return *o.McosVersion
}

// GetMcosVersionOk returns a tuple with the McosVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMcosVersionOk() (*string, bool) {
	if o == nil || IsNil(o.McosVersion) {
		return nil, false
	}
	return o.McosVersion, true
}

// HasMcosVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMcosVersion() bool {
	if o != nil && !IsNil(o.McosVersion) {
		return true
	}

	return false
}

// SetMcosVersion gets a reference to the given string and assigns it to the McosVersion field.
func (o *VersionsResourceInner) SetMcosVersion(v string) {
	o.McosVersion = &v
}

// GetMrcVersion returns the MrcVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetMrcVersion() string {
	if o == nil || IsNil(o.MrcVersion) {
		var ret string
		return ret
	}
	return *o.MrcVersion
}

// GetMrcVersionOk returns a tuple with the MrcVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetMrcVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MrcVersion) {
		return nil, false
	}
	return o.MrcVersion, true
}

// HasMrcVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasMrcVersion() bool {
	if o != nil && !IsNil(o.MrcVersion) {
		return true
	}

	return false
}

// SetMrcVersion gets a reference to the given string and assigns it to the MrcVersion field.
func (o *VersionsResourceInner) SetMrcVersion(v string) {
	o.MrcVersion = &v
}

// GetPcieSwitchBackendConfigurationVersion returns the PcieSwitchBackendConfigurationVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPcieSwitchBackendConfigurationVersion() string {
	if o == nil || IsNil(o.PcieSwitchBackendConfigurationVersion) {
		var ret string
		return ret
	}
	return *o.PcieSwitchBackendConfigurationVersion
}

// GetPcieSwitchBackendConfigurationVersionOk returns a tuple with the PcieSwitchBackendConfigurationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPcieSwitchBackendConfigurationVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PcieSwitchBackendConfigurationVersion) {
		return nil, false
	}
	return o.PcieSwitchBackendConfigurationVersion, true
}

// HasPcieSwitchBackendConfigurationVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPcieSwitchBackendConfigurationVersion() bool {
	if o != nil && !IsNil(o.PcieSwitchBackendConfigurationVersion) {
		return true
	}

	return false
}

// SetPcieSwitchBackendConfigurationVersion gets a reference to the given string and assigns it to the PcieSwitchBackendConfigurationVersion field.
func (o *VersionsResourceInner) SetPcieSwitchBackendConfigurationVersion(v string) {
	o.PcieSwitchBackendConfigurationVersion = &v
}

// GetPcieSwitchBackendFirmwareVersion returns the PcieSwitchBackendFirmwareVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPcieSwitchBackendFirmwareVersion() string {
	if o == nil || IsNil(o.PcieSwitchBackendFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.PcieSwitchBackendFirmwareVersion
}

// GetPcieSwitchBackendFirmwareVersionOk returns a tuple with the PcieSwitchBackendFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPcieSwitchBackendFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PcieSwitchBackendFirmwareVersion) {
		return nil, false
	}
	return o.PcieSwitchBackendFirmwareVersion, true
}

// HasPcieSwitchBackendFirmwareVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPcieSwitchBackendFirmwareVersion() bool {
	if o != nil && !IsNil(o.PcieSwitchBackendFirmwareVersion) {
		return true
	}

	return false
}

// SetPcieSwitchBackendFirmwareVersion gets a reference to the given string and assigns it to the PcieSwitchBackendFirmwareVersion field.
func (o *VersionsResourceInner) SetPcieSwitchBackendFirmwareVersion(v string) {
	o.PcieSwitchBackendFirmwareVersion = &v
}

// GetPcieSwitchFrontendConfigurationVersion returns the PcieSwitchFrontendConfigurationVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPcieSwitchFrontendConfigurationVersion() string {
	if o == nil || IsNil(o.PcieSwitchFrontendConfigurationVersion) {
		var ret string
		return ret
	}
	return *o.PcieSwitchFrontendConfigurationVersion
}

// GetPcieSwitchFrontendConfigurationVersionOk returns a tuple with the PcieSwitchFrontendConfigurationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPcieSwitchFrontendConfigurationVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PcieSwitchFrontendConfigurationVersion) {
		return nil, false
	}
	return o.PcieSwitchFrontendConfigurationVersion, true
}

// HasPcieSwitchFrontendConfigurationVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPcieSwitchFrontendConfigurationVersion() bool {
	if o != nil && !IsNil(o.PcieSwitchFrontendConfigurationVersion) {
		return true
	}

	return false
}

// SetPcieSwitchFrontendConfigurationVersion gets a reference to the given string and assigns it to the PcieSwitchFrontendConfigurationVersion field.
func (o *VersionsResourceInner) SetPcieSwitchFrontendConfigurationVersion(v string) {
	o.PcieSwitchFrontendConfigurationVersion = &v
}

// GetPcieSwitchFrontendFirmwareVersion returns the PcieSwitchFrontendFirmwareVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPcieSwitchFrontendFirmwareVersion() string {
	if o == nil || IsNil(o.PcieSwitchFrontendFirmwareVersion) {
		var ret string
		return ret
	}
	return *o.PcieSwitchFrontendFirmwareVersion
}

// GetPcieSwitchFrontendFirmwareVersionOk returns a tuple with the PcieSwitchFrontendFirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPcieSwitchFrontendFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PcieSwitchFrontendFirmwareVersion) {
		return nil, false
	}
	return o.PcieSwitchFrontendFirmwareVersion, true
}

// HasPcieSwitchFrontendFirmwareVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPcieSwitchFrontendFirmwareVersion() bool {
	if o != nil && !IsNil(o.PcieSwitchFrontendFirmwareVersion) {
		return true
	}

	return false
}

// SetPcieSwitchFrontendFirmwareVersion gets a reference to the given string and assigns it to the PcieSwitchFrontendFirmwareVersion field.
func (o *VersionsResourceInner) SetPcieSwitchFrontendFirmwareVersion(v string) {
	o.PcieSwitchFrontendFirmwareVersion = &v
}

// GetPldRev returns the PldRev field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPldRev() string {
	if o == nil || IsNil(o.PldRev) {
		var ret string
		return ret
	}
	return *o.PldRev
}

// GetPldRevOk returns a tuple with the PldRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPldRevOk() (*string, bool) {
	if o == nil || IsNil(o.PldRev) {
		return nil, false
	}
	return o.PldRev, true
}

// HasPldRev returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPldRev() bool {
	if o != nil && !IsNil(o.PldRev) {
		return true
	}

	return false
}

// SetPldRev gets a reference to the given string and assigns it to the PldRev field.
func (o *VersionsResourceInner) SetPldRev(v string) {
	o.PldRev = &v
}

// GetPmCpldVersion returns the PmCpldVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPmCpldVersion() string {
	if o == nil || IsNil(o.PmCpldVersion) {
		var ret string
		return ret
	}
	return *o.PmCpldVersion
}

// GetPmCpldVersionOk returns a tuple with the PmCpldVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPmCpldVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PmCpldVersion) {
		return nil, false
	}
	return o.PmCpldVersion, true
}

// HasPmCpldVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPmCpldVersion() bool {
	if o != nil && !IsNil(o.PmCpldVersion) {
		return true
	}

	return false
}

// SetPmCpldVersion gets a reference to the given string and assigns it to the PmCpldVersion field.
func (o *VersionsResourceInner) SetPmCpldVersion(v string) {
	o.PmCpldVersion = &v
}

// GetPrmVersion returns the PrmVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPrmVersion() string {
	if o == nil || IsNil(o.PrmVersion) {
		var ret string
		return ret
	}
	return *o.PrmVersion
}

// GetPrmVersionOk returns a tuple with the PrmVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPrmVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PrmVersion) {
		return nil, false
	}
	return o.PrmVersion, true
}

// HasPrmVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPrmVersion() bool {
	if o != nil && !IsNil(o.PrmVersion) {
		return true
	}

	return false
}

// SetPrmVersion gets a reference to the given string and assigns it to the PrmVersion field.
func (o *VersionsResourceInner) SetPrmVersion(v string) {
	o.PrmVersion = &v
}

// GetPubsVersion returns the PubsVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetPubsVersion() string {
	if o == nil || IsNil(o.PubsVersion) {
		var ret string
		return ret
	}
	return *o.PubsVersion
}

// GetPubsVersionOk returns a tuple with the PubsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetPubsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PubsVersion) {
		return nil, false
	}
	return o.PubsVersion, true
}

// HasPubsVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasPubsVersion() bool {
	if o != nil && !IsNil(o.PubsVersion) {
		return true
	}

	return false
}

// SetPubsVersion gets a reference to the given string and assigns it to the PubsVersion field.
func (o *VersionsResourceInner) SetPubsVersion(v string) {
	o.PubsVersion = &v
}

// GetScBaselevel returns the ScBaselevel field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScBaselevel() string {
	if o == nil || IsNil(o.ScBaselevel) {
		var ret string
		return ret
	}
	return *o.ScBaselevel
}

// GetScBaselevelOk returns a tuple with the ScBaselevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScBaselevelOk() (*string, bool) {
	if o == nil || IsNil(o.ScBaselevel) {
		return nil, false
	}
	return o.ScBaselevel, true
}

// HasScBaselevel returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScBaselevel() bool {
	if o != nil && !IsNil(o.ScBaselevel) {
		return true
	}

	return false
}

// SetScBaselevel gets a reference to the given string and assigns it to the ScBaselevel field.
func (o *VersionsResourceInner) SetScBaselevel(v string) {
	o.ScBaselevel = &v
}

// GetScCpuType returns the ScCpuType field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScCpuType() string {
	if o == nil || IsNil(o.ScCpuType) {
		var ret string
		return ret
	}
	return *o.ScCpuType
}

// GetScCpuTypeOk returns a tuple with the ScCpuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScCpuTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScCpuType) {
		return nil, false
	}
	return o.ScCpuType, true
}

// HasScCpuType returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScCpuType() bool {
	if o != nil && !IsNil(o.ScCpuType) {
		return true
	}

	return false
}

// SetScCpuType gets a reference to the given string and assigns it to the ScCpuType field.
func (o *VersionsResourceInner) SetScCpuType(v string) {
	o.ScCpuType = &v
}

// GetScFuVersion returns the ScFuVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScFuVersion() string {
	if o == nil || IsNil(o.ScFuVersion) {
		var ret string
		return ret
	}
	return *o.ScFuVersion
}

// GetScFuVersionOk returns a tuple with the ScFuVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScFuVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ScFuVersion) {
		return nil, false
	}
	return o.ScFuVersion, true
}

// HasScFuVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScFuVersion() bool {
	if o != nil && !IsNil(o.ScFuVersion) {
		return true
	}

	return false
}

// SetScFuVersion gets a reference to the given string and assigns it to the ScFuVersion field.
func (o *VersionsResourceInner) SetScFuVersion(v string) {
	o.ScFuVersion = &v
}

// GetScFw returns the ScFw field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScFw() string {
	if o == nil || IsNil(o.ScFw) {
		var ret string
		return ret
	}
	return *o.ScFw
}

// GetScFwOk returns a tuple with the ScFw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScFwOk() (*string, bool) {
	if o == nil || IsNil(o.ScFw) {
		return nil, false
	}
	return o.ScFw, true
}

// HasScFw returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScFw() bool {
	if o != nil && !IsNil(o.ScFw) {
		return true
	}

	return false
}

// SetScFw gets a reference to the given string and assigns it to the ScFw field.
func (o *VersionsResourceInner) SetScFw(v string) {
	o.ScFw = &v
}

// GetScLoader returns the ScLoader field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScLoader() string {
	if o == nil || IsNil(o.ScLoader) {
		var ret string
		return ret
	}
	return *o.ScLoader
}

// GetScLoaderOk returns a tuple with the ScLoader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScLoaderOk() (*string, bool) {
	if o == nil || IsNil(o.ScLoader) {
		return nil, false
	}
	return o.ScLoader, true
}

// HasScLoader returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScLoader() bool {
	if o != nil && !IsNil(o.ScLoader) {
		return true
	}

	return false
}

// SetScLoader gets a reference to the given string and assigns it to the ScLoader field.
func (o *VersionsResourceInner) SetScLoader(v string) {
	o.ScLoader = &v
}

// GetScMemory returns the ScMemory field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetScMemory() string {
	if o == nil || IsNil(o.ScMemory) {
		var ret string
		return ret
	}
	return *o.ScMemory
}

// GetScMemoryOk returns a tuple with the ScMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetScMemoryOk() (*string, bool) {
	if o == nil || IsNil(o.ScMemory) {
		return nil, false
	}
	return o.ScMemory, true
}

// HasScMemory returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasScMemory() bool {
	if o != nil && !IsNil(o.ScMemory) {
		return true
	}

	return false
}

// SetScMemory gets a reference to the given string and assigns it to the ScMemory field.
func (o *VersionsResourceInner) SetScMemory(v string) {
	o.ScMemory = &v
}

// GetTranslationVersion returns the TranslationVersion field value if set, zero value otherwise.
func (o *VersionsResourceInner) GetTranslationVersion() string {
	if o == nil || IsNil(o.TranslationVersion) {
		var ret string
		return ret
	}
	return *o.TranslationVersion
}

// GetTranslationVersionOk returns a tuple with the TranslationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionsResourceInner) GetTranslationVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TranslationVersion) {
		return nil, false
	}
	return o.TranslationVersion, true
}

// HasTranslationVersion returns a boolean if a field has been set.
func (o *VersionsResourceInner) HasTranslationVersion() bool {
	if o != nil && !IsNil(o.TranslationVersion) {
		return true
	}

	return false
}

// SetTranslationVersion gets a reference to the given string and assigns it to the TranslationVersion field.
func (o *VersionsResourceInner) SetTranslationVersion(v string) {
	o.TranslationVersion = &v
}

func (o VersionsResourceInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionsResourceInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectName) {
		toSerialize["object-name"] = o.ObjectName
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.BackplaneType) {
		toSerialize["backplane-type"] = o.BackplaneType
	}
	if !IsNil(o.BuildDate) {
		toSerialize["build-date"] = o.BuildDate
	}
	if !IsNil(o.BundleBaseVersion) {
		toSerialize["bundle-base-version"] = o.BundleBaseVersion
	}
	if !IsNil(o.BundleStatus) {
		toSerialize["bundle-status"] = o.BundleStatus
	}
	if !IsNil(o.BundleStatusNumeric) {
		toSerialize["bundle-status-numeric"] = o.BundleStatusNumeric
	}
	if !IsNil(o.BundleVersion) {
		toSerialize["bundle-version"] = o.BundleVersion
	}
	if !IsNil(o.BundleVersionOnly) {
		toSerialize["bundle-version-only"] = o.BundleVersionOnly
	}
	if !IsNil(o.CapiVersion) {
		toSerialize["capi-version"] = o.CapiVersion
	}
	if !IsNil(o.CtkVersion) {
		toSerialize["ctk-version"] = o.CtkVersion
	}
	if !IsNil(o.DiskChannelRevision) {
		toSerialize["disk-channel_revision"] = o.DiskChannelRevision
	}
	if !IsNil(o.EcFw) {
		toSerialize["ec-fw"] = o.EcFw
	}
	if !IsNil(o.FwDefaultPlatformBrand) {
		toSerialize["fw-default-platform-brand"] = o.FwDefaultPlatformBrand
	}
	if !IsNil(o.FwDefaultPlatformBrandNumeric) {
		toSerialize["fw-default-platform-brand-numeric"] = o.FwDefaultPlatformBrandNumeric
	}
	if !IsNil(o.GemVersion) {
		toSerialize["gem-version"] = o.GemVersion
	}
	if !IsNil(o.HimModel) {
		toSerialize["him-model"] = o.HimModel
	}
	if !IsNil(o.HimRev) {
		toSerialize["him-rev"] = o.HimRev
	}
	if !IsNil(o.HostChannelRevision) {
		toSerialize["host-channel_revision"] = o.HostChannelRevision
	}
	if !IsNil(o.HwRev) {
		toSerialize["hw-rev"] = o.HwRev
	}
	if !IsNil(o.McBaseFw) {
		toSerialize["mc-base-fw"] = o.McBaseFw
	}
	if !IsNil(o.McFw) {
		toSerialize["mc-fw"] = o.McFw
	}
	if !IsNil(o.McLoader) {
		toSerialize["mc-loader"] = o.McLoader
	}
	if !IsNil(o.McosVersion) {
		toSerialize["mcos-version"] = o.McosVersion
	}
	if !IsNil(o.MrcVersion) {
		toSerialize["mrc-version"] = o.MrcVersion
	}
	if !IsNil(o.PcieSwitchBackendConfigurationVersion) {
		toSerialize["pcie-switch-backend-configuration-version"] = o.PcieSwitchBackendConfigurationVersion
	}
	if !IsNil(o.PcieSwitchBackendFirmwareVersion) {
		toSerialize["pcie-switch-backend-firmware-version"] = o.PcieSwitchBackendFirmwareVersion
	}
	if !IsNil(o.PcieSwitchFrontendConfigurationVersion) {
		toSerialize["pcie-switch-frontend-configuration-version"] = o.PcieSwitchFrontendConfigurationVersion
	}
	if !IsNil(o.PcieSwitchFrontendFirmwareVersion) {
		toSerialize["pcie-switch-frontend-firmware-version"] = o.PcieSwitchFrontendFirmwareVersion
	}
	if !IsNil(o.PldRev) {
		toSerialize["pld-rev"] = o.PldRev
	}
	if !IsNil(o.PmCpldVersion) {
		toSerialize["pm-cpld-version"] = o.PmCpldVersion
	}
	if !IsNil(o.PrmVersion) {
		toSerialize["prm-version"] = o.PrmVersion
	}
	if !IsNil(o.PubsVersion) {
		toSerialize["pubs-version"] = o.PubsVersion
	}
	if !IsNil(o.ScBaselevel) {
		toSerialize["sc-baselevel"] = o.ScBaselevel
	}
	if !IsNil(o.ScCpuType) {
		toSerialize["sc-cpu-type"] = o.ScCpuType
	}
	if !IsNil(o.ScFuVersion) {
		toSerialize["sc-fu-version"] = o.ScFuVersion
	}
	if !IsNil(o.ScFw) {
		toSerialize["sc-fw"] = o.ScFw
	}
	if !IsNil(o.ScLoader) {
		toSerialize["sc-loader"] = o.ScLoader
	}
	if !IsNil(o.ScMemory) {
		toSerialize["sc-memory"] = o.ScMemory
	}
	if !IsNil(o.TranslationVersion) {
		toSerialize["translation-version"] = o.TranslationVersion
	}
	return toSerialize, nil
}

type NullableVersionsResourceInner struct {
	value *VersionsResourceInner
	isSet bool
}

func (v NullableVersionsResourceInner) Get() *VersionsResourceInner {
	return v.value
}

func (v *NullableVersionsResourceInner) Set(val *VersionsResourceInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionsResourceInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionsResourceInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionsResourceInner(val *VersionsResourceInner) *NullableVersionsResourceInner {
	return &NullableVersionsResourceInner{value: val, isSet: true}
}

func (v NullableVersionsResourceInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionsResourceInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
