/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EnclosuresObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnclosuresObject{}

// EnclosuresObject struct for EnclosuresObject
type EnclosuresObject struct {
	Status     []StatusResourceInner     `json:"status,omitempty"`
	Enclosures []EnclosuresResourceInner `json:"enclosures,omitempty"`
}

// NewEnclosuresObject instantiates a new EnclosuresObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnclosuresObject() *EnclosuresObject {
	this := EnclosuresObject{}
	return &this
}

// NewEnclosuresObjectWithDefaults instantiates a new EnclosuresObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnclosuresObjectWithDefaults() *EnclosuresObject {
	this := EnclosuresObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnclosuresObject) GetStatus() []StatusResourceInner {
	if o == nil || IsNil(o.Status) {
		var ret []StatusResourceInner
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnclosuresObject) GetStatusOk() ([]StatusResourceInner, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnclosuresObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StatusResourceInner and assigns it to the Status field.
func (o *EnclosuresObject) SetStatus(v []StatusResourceInner) {
	o.Status = v
}

// GetEnclosures returns the Enclosures field value if set, zero value otherwise.
func (o *EnclosuresObject) GetEnclosures() []EnclosuresResourceInner {
	if o == nil || IsNil(o.Enclosures) {
		var ret []EnclosuresResourceInner
		return ret
	}
	return o.Enclosures
}

// GetEnclosuresOk returns a tuple with the Enclosures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnclosuresObject) GetEnclosuresOk() ([]EnclosuresResourceInner, bool) {
	if o == nil || IsNil(o.Enclosures) {
		return nil, false
	}
	return o.Enclosures, true
}

// HasEnclosures returns a boolean if a field has been set.
func (o *EnclosuresObject) HasEnclosures() bool {
	if o != nil && !IsNil(o.Enclosures) {
		return true
	}

	return false
}

// SetEnclosures gets a reference to the given []EnclosuresResourceInner and assigns it to the Enclosures field.
func (o *EnclosuresObject) SetEnclosures(v []EnclosuresResourceInner) {
	o.Enclosures = v
}

func (o EnclosuresObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnclosuresObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Enclosures) {
		toSerialize["enclosures"] = o.Enclosures
	}
	return toSerialize, nil
}

type NullableEnclosuresObject struct {
	value *EnclosuresObject
	isSet bool
}

func (v NullableEnclosuresObject) Get() *EnclosuresObject {
	return v.value
}

func (v *NullableEnclosuresObject) Set(val *EnclosuresObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEnclosuresObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEnclosuresObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnclosuresObject(val *EnclosuresObject) *NullableEnclosuresObject {
	return &NullableEnclosuresObject{value: val, isSet: true}
}

func (v NullableEnclosuresObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnclosuresObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
