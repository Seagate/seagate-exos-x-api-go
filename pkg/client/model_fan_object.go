/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FanObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FanObject{}

// FanObject struct for FanObject
type FanObject struct {
	Status []StatusResourceInner `json:"status,omitempty"`
	Fan    []FanResourceInner    `json:"fan,omitempty"`
}

// NewFanObject instantiates a new FanObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFanObject() *FanObject {
	this := FanObject{}
	return &this
}

// NewFanObjectWithDefaults instantiates a new FanObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFanObjectWithDefaults() *FanObject {
	this := FanObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FanObject) GetStatus() []StatusResourceInner {
	if o == nil || IsNil(o.Status) {
		var ret []StatusResourceInner
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FanObject) GetStatusOk() ([]StatusResourceInner, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FanObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StatusResourceInner and assigns it to the Status field.
func (o *FanObject) SetStatus(v []StatusResourceInner) {
	o.Status = v
}

// GetFan returns the Fan field value if set, zero value otherwise.
func (o *FanObject) GetFan() []FanResourceInner {
	if o == nil || IsNil(o.Fan) {
		var ret []FanResourceInner
		return ret
	}
	return o.Fan
}

// GetFanOk returns a tuple with the Fan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FanObject) GetFanOk() ([]FanResourceInner, bool) {
	if o == nil || IsNil(o.Fan) {
		return nil, false
	}
	return o.Fan, true
}

// HasFan returns a boolean if a field has been set.
func (o *FanObject) HasFan() bool {
	if o != nil && !IsNil(o.Fan) {
		return true
	}

	return false
}

// SetFan gets a reference to the given []FanResourceInner and assigns it to the Fan field.
func (o *FanObject) SetFan(v []FanResourceInner) {
	o.Fan = v
}

func (o FanObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FanObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Fan) {
		toSerialize["fan"] = o.Fan
	}
	return toSerialize, nil
}

type NullableFanObject struct {
	value *FanObject
	isSet bool
}

func (v NullableFanObject) Get() *FanObject {
	return v.value
}

func (v *NullableFanObject) Set(val *FanObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFanObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFanObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFanObject(val *FanObject) *NullableFanObject {
	return &NullableFanObject{value: val, isSet: true}
}

func (v NullableFanObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFanObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
